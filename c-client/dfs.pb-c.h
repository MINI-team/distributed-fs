/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dfs.proto */

#ifndef PROTOBUF_C_dfs_2eproto__INCLUDED
#define PROTOBUF_C_dfs_2eproto__INCLUDED

#include "protobuf-c/protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct FileRequest FileRequest;
typedef struct Replica Replica;
typedef struct Chunk Chunk;
typedef struct ChunkList ChunkList;
typedef struct FileResponse FileResponse;


/* --- enums --- */


/* --- messages --- */

struct  FileRequest
{
  ProtobufCMessage base;
  char *path;
  int64_t offset;
  int64_t size;
};
#define FILE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  Replica
{
  ProtobufCMessage base;
  char *name;
  char *ip;
  int32_t port;
  int32_t chunk_id;
  protobuf_c_boolean is_primary;
};
#define REPLICA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&replica__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  Chunk
{
  ProtobufCMessage base;
  int32_t chunk_id;
  size_t n_replicas;
  Replica **replicas;
};
#define CHUNK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chunk__descriptor) \
    , 0, 0,NULL }


struct  ChunkList
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  size_t n_chunks;
  Chunk **chunks;
};
#define CHUNK_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chunk_list__descriptor) \
    , 0, 0,NULL }


struct  FileResponse
{
  ProtobufCMessage base;
  char *filename;
  ProtobufCBinaryData filedata;
};
#define FILE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_response__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL} }


/* FileRequest methods */
void   file_request__init
                     (FileRequest         *message);
size_t file_request__get_packed_size
                     (const FileRequest   *message);
size_t file_request__pack
                     (const FileRequest   *message,
                      uint8_t             *out);
size_t file_request__pack_to_buffer
                     (const FileRequest   *message,
                      ProtobufCBuffer     *buffer);
FileRequest *
       file_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_request__free_unpacked
                     (FileRequest *message,
                      ProtobufCAllocator *allocator);
/* Replica methods */
void   replica__init
                     (Replica         *message);
size_t replica__get_packed_size
                     (const Replica   *message);
size_t replica__pack
                     (const Replica   *message,
                      uint8_t             *out);
size_t replica__pack_to_buffer
                     (const Replica   *message,
                      ProtobufCBuffer     *buffer);
Replica *
       replica__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   replica__free_unpacked
                     (Replica *message,
                      ProtobufCAllocator *allocator);
/* Chunk methods */
void   chunk__init
                     (Chunk         *message);
size_t chunk__get_packed_size
                     (const Chunk   *message);
size_t chunk__pack
                     (const Chunk   *message,
                      uint8_t             *out);
size_t chunk__pack_to_buffer
                     (const Chunk   *message,
                      ProtobufCBuffer     *buffer);
Chunk *
       chunk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chunk__free_unpacked
                     (Chunk *message,
                      ProtobufCAllocator *allocator);
/* ChunkList methods */
void   chunk_list__init
                     (ChunkList         *message);
size_t chunk_list__get_packed_size
                     (const ChunkList   *message);
size_t chunk_list__pack
                     (const ChunkList   *message,
                      uint8_t             *out);
size_t chunk_list__pack_to_buffer
                     (const ChunkList   *message,
                      ProtobufCBuffer     *buffer);
ChunkList *
       chunk_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chunk_list__free_unpacked
                     (ChunkList *message,
                      ProtobufCAllocator *allocator);
/* FileResponse methods */
void   file_response__init
                     (FileResponse         *message);
size_t file_response__get_packed_size
                     (const FileResponse   *message);
size_t file_response__pack
                     (const FileResponse   *message,
                      uint8_t             *out);
size_t file_response__pack_to_buffer
                     (const FileResponse   *message,
                      ProtobufCBuffer     *buffer);
FileResponse *
       file_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_response__free_unpacked
                     (FileResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FileRequest_Closure)
                 (const FileRequest *message,
                  void *closure_data);
typedef void (*Replica_Closure)
                 (const Replica *message,
                  void *closure_data);
typedef void (*Chunk_Closure)
                 (const Chunk *message,
                  void *closure_data);
typedef void (*ChunkList_Closure)
                 (const ChunkList *message,
                  void *closure_data);
typedef void (*FileResponse_Closure)
                 (const FileResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor file_request__descriptor;
extern const ProtobufCMessageDescriptor replica__descriptor;
extern const ProtobufCMessageDescriptor chunk__descriptor;
extern const ProtobufCMessageDescriptor chunk_list__descriptor;
extern const ProtobufCMessageDescriptor file_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dfs_2eproto__INCLUDED */
